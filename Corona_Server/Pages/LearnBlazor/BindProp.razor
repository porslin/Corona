@page "/learnBlazor/bindProp"
@* this above route is not case-sensitive anywhere  *@
@* @using Corona_Models.LearnBlazorModels *@
@* if the using statement is being repeated thru all the pages, import them into the global imports at _imports.razor *@

<div class="row">

    <h2 class="text-success">Individual product</h2>

    <div class="col-6 border p-3">
        <h3 class="text-primary">Product Playground</h3><hr />
        <div>
            Active:
            <input type="checkbox" @bind-value="@Product.IsActive" checked="@(Product.IsActive?"checked":null)" />
            <br />
            <br />
        </div>


        <div>
            Price:
            <input type="number" @bind-value="@Product.Price" />
            <br />
            <br />
        </div>

        <div>
            @* trying to display the entire key-value list of properties: a dropdown of all the properties and selectable *@
            Product properties:

            @* bind the new selectedprop string to the dropdown to be able to fetch it later from html *@
            <select @bind="selectedProp">
                @foreach (var prop in Product.ProductProperties)
                {
                    <option value="@prop.Key">@prop.Key</option>
                }
            </select>
        </div>
    </div>

    <div class="col-6 border p-3">
        <h3 class="text-primary">Product Summary</h3><hr />
        @* 4. here you can now use the object of the class or the product in html code *@
        <div>
            Name: @Product.Name<br />
            @* the above code is one-way data-binding, which is rendering the view as per the values inside the model *@
        </div>

        <div>
            Active: @Product.IsActive<br /><br />

            This product is: @(Product.IsActive?"Active":"Inactive")
            <br />
            <br />
        </div>

        <div>
        Price: @Product.Price<br />
        </div>

        <div>
            @* trying to display the value of whatever prop key that is chosen below *@
            Property selected: @selectedProp<br />

            @if (!String.IsNullOrWhiteSpace(selectedProp))
            {
                <p>Property value: @Product.ProductProperties.FirstOrDefault(u => u.Key==selectedProp).Value</p>
            }
        </div>
    </div>

</div>

<div class="row">
    <div class="col-12 border p-3">
        <h3 class="text-success">Product table</h3><hr />
        <table class="table table-striped">
            <tbody>
                @* for each of the products, display a table row with a td cell. and a input cell for its properties. *@
                @foreach (var prod in Products)
                {
                    <tr>
                        <td>
                            <input type="text" @bind-value="prod.Name" @bind-value:event="oninput" />
                        </td>
                        <td>
                            <input type="text" @bind-value="prod.Price" @bind-value:event="oninput" />
                        </td>
                        <td>
                            <input type="checkbox" @bind-value="prod.IsActive" checked="@(prod.IsActive?"checked":null)" />
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<div class="row">
    <div class="col-12 border p-3">
        <h3 class="text-success">Product summary</h3><hr />

        @foreach(var prod in Products)
        {
            <p>@prod.Name [@prod.Price] is @(prod.IsActive?"Active":"Inactive")</p>    
        }

    </div>
</div>

@code {
    // write all C# code here in this block

    // create a string first to hold the prop that has been selected 
    private string selectedProp = "";

    // 3. start with complete path to model to start creating object
    Demo_Product Product = new()
    {
        // assigning values to the earlier defined properties
        Id=1,
        Name="Rose Candle",
        IsActive=true,
        // adding key-value to a new property to test data-binding
        Price=14.99,

        // creating a collection of product properties as from demo_productprops
        ProductProperties = new List<Demo_ProductProp>()
        {
            // minimize writing subfolders and entire namespaces everytime by using the using statements
            new Demo_ProductProp { Id=1, Key="Color", Value="Black"},
            new Demo_ProductProp { Id=2, Key="Flavor", Value="Rose Jasmine"},
            new Demo_ProductProp { Id=3, Key="Size", Value="20g"}
        }

    };

    // declaring and initializing an empty list
    List<Demo_Product> Products = new();

    // i want to assign products to this above list once the page is loaded
    // in blazor, there are different lifcycles for that of which the OnInitialized method
    // the onintialized method is ready when the component is ready to start and it will receive the initial params from parent in the rendering tree. however, i am not passing any parameters to the component for now
    protected override void OnInitialized()
    {
        // just adding two products to the list with properties
        Products.Add(new()
        {
            Id = 1,
            Name = "Midnight Blaze",
            IsActive = false,
            Price = 19.99,
            ProductProperties = new()
            {
                new Demo_ProductProp { Id = 1, Key = "Flavor", Value = "Rose" },
                new Demo_ProductProp { Id = 2, Key = "Size", Value = "20g" },
                new Demo_ProductProp { Id = 3, Key = "Color", Value = "Purple" }
            }
        });

        Products.Add(new()
        {
            Id = 2,
            Name = "Blossom Lily",
            IsActive = true,
            Price = 25.99,
            ProductProperties = new()
            {
                new Demo_ProductProp { Id = 1, Key = "Flavor", Value = "Lily" },
                new Demo_ProductProp { Id = 2, Key = "Size", Value = "18g" },
                new Demo_ProductProp { Id = 3, Key = "Color", Value = "White" }
            }
        });
    }

}

@* models carry all the properties *@

@* 1. after creating the model in separate project, add the model as project reference to the blazor server project *@

@* 2. create an object of the demo_product class *@