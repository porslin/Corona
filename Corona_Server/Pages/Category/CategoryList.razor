@page "/category"
@inject ICategoryRepository _categoryRepository
@* need to inject the categoryRepository cos it is needed to retreive all the categories created *@

@inject IJSRuntime _jsRuntime

@* invoking a method from child component*@
<_DeleteConfirmationComponent IsParentComponentProcessing="IsLoading" ConfirmationChanged="ConfirmDelete_Click"></_DeleteConfirmationComponent>

<div class="row mt-4">
    <div class="col-6">
        <h4 class="card-title text-primary">Category List</h4>
    </div>
    <div class="col-4 offset-2">
        <a href="category/create" class="btn btn-primary form-control">Add New Category</a>
    </div>
    <div class="col-12">
        @if (Categories.Any())
        {
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach(var objCat in Categories)
                    {
                        <tr>
                            <td>@objCat.Name</td>
                            <td>
                                <NavLink href="@($"category/edit/{objCat.Id}")" class="btn btn-primary">Edit</NavLink>
                                @* must use arrow fucntion when passing a function with parameters *@
                                <button class="btn btn-danger" @onclick="()=>HandleDelete(objCat.Id)">Delete</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            if (IsLoading)
            {
                // display loading gif 
                <div class="text-center">
                    <img src="/images/loading.gif">
                </div>
            }
            else
            {
                // if loading is done, then display no records
                <p>No records found.</p>
            }
        }
    </div>
</div>

@code {
    // i want to display a list of categoryDTO. so it will be an IEnumerable of categoryDTO
    // initialize new list of categoryDTO
    private IEnumerable<CategoryDTO> Categories { get; set; } = new List<CategoryDTO>();

    // adding a boolean flag that will be a processing flag
    public bool IsLoading { get; set; }

    private int DeleteCategoryId { get; set; } = 0;

    // use the OnInitialized lifecycle to get the categories and display them in the categories list
    // try to avoid task.run on onintializedasync. instead use onafterrenderasync.
    // but the onAfterRenderAsync does not make the ui change
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // load cateogires here by using the GetAll method in the categoryRepository
            // Categories = _categoryRepository.GetAll();
            LoadCategories();
            // now the page loads immediately on click and the contents/cateogries list loads abit later
        }

    }
    // first render of OnInitialized takes awhile even tho the url changes immediately upon click into cateogry page. 
    // the first time it is being called, it has to establish the connection to db and it will have to fill the categories list before the page loads
    // changing this to an async method will enable spinning out the loading of categories in a different thread while the UI renders


    // so now loading of cateogries will be in a separate thread here:
    private void LoadCategories()
    {
        IsLoading = true;
        StateHasChanged();
        // populating categories inside here
        Categories = _categoryRepository.GetAll();
        // so once categories are loaded, the IsLoading will be set to false
        IsLoading = false;
        StateHasChanged();
        // notifiy the app that state has changed and that it needs to do some reredenring
    }

    private void HandleDelete(int id)
    {
        // setting deletecategoryid to the id that is received in the parameter
        DeleteCategoryId = id;
        // adding the js function
        _jsRuntime.InvokeVoidAsync("ShowDeleteConfirmationModal");
    }

    public async Task ConfirmDelete_Click(bool isConfirmed)
    {
        IsLoading = true;
        if (isConfirmed && DeleteCategoryId!=0)
        {
            // creating a delete processing time
            // await Task.Delay(5000);
            // delete
            _categoryRepository.Delete(DeleteCategoryId);
            // reload categories
            LoadCategories();
            // hide the delete confirmation
            _jsRuntime.InvokeVoidAsync("HideDeleteConfirmationModal");
        }
        IsLoading = false;
    }
}
